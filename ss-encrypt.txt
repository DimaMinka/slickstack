#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: http://mirrors.slickstack.io/ss-encrypt.txt ###########################################
#### path: /var/www/ss-encrypt #####################################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: generates or renews free SSL certificates from OpenSSL and Certbot ###################
#### ss version: SlickStack alpha ss6d #############################################################
#### module version: n/a ###########################################################################
####################################################################################################

## Ref: https://linuxize.com/post/secure-apache-with-let-s-encrypt-on-ubuntu-18-04/
## Ref: https://stackoverflow.com/a/57019299/1718491
## Ref: https://matthewlehner.net/lets-encrypt-with-nginx
## Ref: https://community.letsencrypt.org/t/how-often-should-i-run-the-cerbot-cron-job-to-update-the-certificates/18851
## Ref: https://community.letsencrypt.org/t/how-to-get-crt-and-key-files-from-i-just-have-pem-files/7348/2
## Ref: https://community.letsencrypt.org/t/certificate-path/24227

## include SlickStack configuration ##
source /var/www/ss-config

## MESSAGE ##
echo -e "\e[36mInstalling (or renewing) free SSL certs from OpenSSL and Certbot...\e[0m"

####################################################################################################
#### OpenSSL: Create Self-Signed Certificate + Generate DH Parameters ##############################
####################################################################################################

## create self-signed OpenSSL certificate ##
openssl req -new -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/ssl/nginx.key -out /etc/ssl/nginx.crt -subj "/C=${SSL_COUNTRY}/ST=${SSL_STATE}/L=${SSL_CITY}/O=${SSL_COMPANY}/OU=${SSL_DEPT}/CN=${SITE_DOMAIN}"

## generate DH parameters ##
openssl dhparam -out /etc/ssl/dhparam.pem 2048

## restart services (OpenSSL + CloudFlare must be working before Certbot can validate) ##
/etc/init.d/nginx restart

####################################################################################################
#### Cerbot: Reminder To Activate CloudFlare (10 Minute Pause For Virgin Installs) #################
####################################################################################################

## if virgin SlickStack install and Cerbot has been chosen... ##
## needs to be changed cuz all servers should have both certs during install ##
if [ ! -f "/var/www/meta/.cherry" ] || [ "$SLICKSTACK_SSL" == "certbot" ]; then
    secs=$((15 * 60))
    echo -e "\e[36mELEVATOR MUSIC... since this is a virgin SlickStack installation and you have chosen Certbot instead of OpenSSL we will now attempt to generate a Lets Encrypt cert but for this to work correct your domain needs to have CloudFlare activated (in order to CA-sign the OpenSSL certificate)... hurry up and activate CloudFlare on this domain NOW and choose Full SSL if you haven't already and within 10 minutes this script will continue and attempt to finalize the Lets Encrypt cert... in the future you can make this easier by first installing SlickStack using OpenSSL and then changing to Certbot later on...\e[0m"
    while [ $secs -gt 0 ]; do
       echo -ne "$secs\033[0K\r"
       read -t 1
       : $((secs--))
    done
fi

####################################################################################################
#### Cerbot: Prepare Public Challenge Directory + Request Certificate ##############################
####################################################################################################

## ensure public Certbot verification folder exists ##
## in future versions maybe hide this in a system folder (Nginx server block mask) ##
mkdir -p /var/www/html/.well-known
chown -R www-data:www-data /var/www/html/.well-known
chmod -R g+s /var/www/html/.well-known
chmod 755 /var/www/html/.well-known

## request Certbot SSL certificate (depends on their remote API) ##
certbot certonly --noninteractive --agree-tos --register-unsafely-without-email -d ${SITE_DOMAIN} --webroot -w /var/www/html/

####################################################################################################
#### Cerbot: Create Symlinks + Modify Nginx Configuration ##########################################
####################################################################################################

## create symlinks for easier Nginx management ##
ln -s /etc/letsencrypt/live/${SITE_DOMAIN}/cert.pem /etc/ssl/cert.pem &> /dev/null
ln -s /etc/letsencrypt/live/${SITE_DOMAIN}/privkey.pem /etc/ssl/privkey.pem &> /dev/null
ln -s /etc/letsencrypt/live/${SITE_DOMAIN}/chain.pem /etc/ssl/chain.pem &> /dev/null
ln -s /etc/letsencrypt/live/${SITE_DOMAIN}/fullchain.pem /etc/ssl/fullchain.pem &> /dev/null

## tweak Nginx config if Certbot succesful ##
if [ -d  "/etc/letsencrypt/live" ] || [ -f  "/etc/ssl/cert.pem" ] || [ "$SLICKSTACK_SSL" == "certbot" ]; then
    sed -i "s#@/etc/ssl/nginx.crt#/etc/ssl/cert.pem#g" /etc/nginx/nginx.conf
    sed -i "s#@/etc/ssl/nginx.key#/etc/ssl/privkey.pem#g" /etc/nginx/nginx.conf
    sed -i "s/#@@//g" /etc/nginx/nginx.conf
    /etc/init.d/nginx restart
fi

####################################################################################################
#### Reset Permissions (OpenSSL + Certbot) #########################################################
####################################################################################################

chown root:root /etc/ssl/nginx.key
chown root:root /etc/ssl/nginx.crt
chown root:root /etc/ssl/cert.pem
chown root:root /etc/ssl/privkey.pem
chown root:root /etc/ssl/chain.pem
chown root:root /etc/ssl/fullchain.pem
