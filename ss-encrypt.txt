#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: http://mirrors.slickstack.io/ss-encrypt.txt ###########################################
#### path: /var/www/ss-encrypt #####################################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: generates or renews free SSL certificates via OpenSSL and Certbot ####################
#### ss version: SlickStack alpha ss6d #############################################################
#### module version: n/a ###########################################################################
####################################################################################################

## Ref: https://linuxize.com/post/secure-apache-with-let-s-encrypt-on-ubuntu-18-04/
## Ref: https://stackoverflow.com/a/57019299/1718491
## Ref: https://community.letsencrypt.org/t/how-often-should-i-run-the-cerbot-cron-job-to-update-the-certificates/18851
## Ref: https://matthewlehner.net/lets-encrypt-with-nginx
## Ref: https://community.letsencrypt.org/t/how-to-get-crt-and-key-files-from-i-just-have-pem-files/7348/2
## Ref: https://community.letsencrypt.org/t/certificate-path/24227

## include SlickStack configuration ##
source /var/www/ss-config

## MESSAGE: explain repos ##
echo -e "\e[36mInstalling (or renewing) free SSL certificates from OpenSSL and Certbot...\e[0m"

####################################################################################################
#### OpenSSL: Create Self-Signed Certificate + DH Parameters #######################################
####################################################################################################

## install OpenSSL certificate ##
openssl req -new -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/ssl/nginx.key -out /etc/ssl/nginx.crt -subj "/C=${SSL_COUNTRY}/ST=${SSL_STATE}/L=${SSL_CITY}/O=${SSL_COMPANY}/OU=${SSL_DEPT}/CN=${SITE_DOMAIN}"

## generate DH parameters ##
openssl dhparam -out /etc/ssl/dhparam.pem 2048

####################################################################################################
#### Cerbot: Create Symlinks And Public Challenge Directory ########################################
####################################################################################################

## create symlinks so Nginx / Ubuntu can find the Certbot certs ##
ln -s /etc/letsencrypt/live/${SITE_DOMAIN}/cert.pem /etc/ssl/cert.pem &> /dev/null
ln -s /etc/letsencrypt/live/${SITE_DOMAIN}/privkey.pem /etc/ssl/privkey.pem &> /dev/null
ln -s /etc/letsencrypt/live/${SITE_DOMAIN}/chain.pem /etc/ssl/chain.pem &> /dev/null
ln -s /etc/letsencrypt/live/${SITE_DOMAIN}/fullchain.pem /etc/ssl/fullchain.pem &> /dev/null

## ensure public Certbot verification folder exists ##
## in future versions maybe hide this in a system folder (Nginx mask) ##
mkdir -p /var/www/html/.well-known
chown -R www-data:www-data /var/www/html/.well-known
chmod -R g+s /var/www/html/.well-known
chmod 755 /var/www/html/.well-known

## MESSAGE: explain repos ##
echo -e "\e[36mELEVATOR MUSIC... since this is a virgin SlickStack installation and you have chosen Certbot instead of OpenSSL we will now attempt to generate a Lets Encrypt cert but for this to work correct your domain needs to have CloudFlare activated (in order to CA-sign the OpenSSL certificate)... hurry up and activate CloudFlare on this domain NOW and choose Full SSL if you haven't already and within 10 minutes this script will continue and attempt to finalize the Lets Encrypt cert... in the future you can make this easier by first installing SlickStack using OpenSSL and then changing to Certbot later on...\e[0m"

## pause script for 10 minutes ##
secs=$((10 * 60))
while [ $secs -gt 0 ]; do
   echo -ne "$secs\033[0K\r"
   sleep 1
   : $((secs--))
done

## install Certbox SSL certificate ##
certbot certonly --noninteractive --agree-tos --register-unsafely-without-email -d ${SITE_DOMAIN} --webroot -w /var/www/html/

## tweak Nginx config if Certbot is chosen ##
if [[ "$SLICKSTACK_SSL" == "certbot" ]]; then 
    sed -i "s#@/etc/ssl/nginx.crt#/etc/ssl/cert.pem#g" /etc/nginx/nginx.conf
    sed -i "s#@/etc/ssl/nginx.key#/etc/ssl/privkey.pem#g" /etc/nginx/nginx.conf
    sed -i "s/#@@//g" /etc/nginx/nginx.conf
fi

## reset permissions ##
chown root:root /etc/ssl/nginx.key
chown root:root /etc/ssl/nginx.crt
chown root:root /etc/ssl/cert.pem
chown root:root /etc/ssl/privkey.pem
chown root:root /etc/ssl/chain.pem
chown root:root /etc/ssl/fullchain.pem
