#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: http://mirrors.slickstack.io/ss-install-mysql.txt #####################################
#### path: /var/www/ss-install-mysql ###############################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: Reinstalls the entire MySQL module for SlickStack servers (idempotent) ###############
#### module version: Ubuntu 20.04 LTS + MySQL 8.0.x ################################################
####################################################################################################

## include SlickStack configuration ##
source /var/www/ss-config

####################################################################################################
#### SlickStack: Critical Bash Functions (Aliases) For This Script To Work #########################
####################################################################################################

## apt alias flags ##
function apt {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    command /usr/bin/apt -q -y -o Dpkg::Options::=--force-confold -o Dpkg::Options::=--force-confdef "$@"
}

## add-apt-repository alias flags ##
function add-apt-repository {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    command /usr/bin/add-apt-repository -y "$@"
}

## mysql alias flags ##
function mysql {
    export MYSQL_PWD=$DB_PASSWORD_ROOT
    command mysql --user=root --database="$DB_NAME" --host="$DB_HOST" --protocol=tcp --port=3306 --force "$@"
}

## wget alias flags ##
function wget {
    command wget --no-check-certificate --no-cache --no-cookies --tries=3 --timeout=15 "$@"
}

## cp alias flags ##
function cp {
    command cp -R -f -d --no-preserve=mode,ownership "$@"
}

## rsync alias flags ##
function rsync {
    command rsync -aI --ignore-errors "$@"
}

## unzip alias flags ##
function unzip {
    command unzip -o "$@"
}

## rm alias flags ##
function rm {
    command rm -R -f "$@"
}

## mkdir alias flags ##
function mkdir {
    command mkdir -p "$@"
}

## ln alias flags ##
function ln {
    command ln -s -f "$@"
}

####################################################################################################
#### SS-Install-MySQL: Install MySQL 8.0.x (Single Database Only) ##################################
####################################################################################################

## MODULE VERSION: MySQL 8.0.x

## set noninteractive ##
export DEBIAN_FRONTEND=noninteractive;

## update repo cache ##
apt update

echo debconf mysql-server/root_password password ${DB_PASSWORD_ROOT} | debconf-set-selections
echo debconf mysql-server/root_password_again password ${DB_PASSWORD_ROOT} | debconf-set-selections

## TEMP STORAGE ##
# echo "mysql-server-5.7 mysql-server/root_password password ${dbrootpass}" | debconf-set-selections
# echo "mysql-server-5.7 mysql-server/root_password_again password ${dbrootpass}" | debconf-set-selections
# debconf-set-selections <<< "mysql-server-5.7 mysql-server/root_password password ${dbrootpass}"
# debconf-set-selections <<< "mysql-server-5.7 mysql-server/root_password_again password ${dbrootpass}"

## remove all MySQL packages (avoid purge to retain database) ##
apt remove ^mysql-server

## install MySQL 8.0.x ##
apt install mysql-server-8.0

## MESSAGE ##
echo -e "\e[36mMySQL 8.0 is installed, now we will secure it...\e[0m"

## manually secure MySQL using queries (reliable noninteractive version of the mysql_secure_installation wizard) ##
mysql -e "UNINSTALL COMPONENT 'file://component_validate_password';"
mysql -e "FLUSH PRIVILEGES;"
mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD_ROOT}';"
# mysql -e "ALTER USER 'root'@'127.0.0.1' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD_ROOT}';"
# mysql -e "ALTER USER 'root'@'::1' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD_ROOT}';"
mysql -e "FLUSH PRIVILEGES;"
mysql -e "DELETE FROM mysql.user WHERE user='';"
mysql -e "FLUSH PRIVILEGES;"
mysql -e "DELETE FROM mysql.user WHERE user='root' AND host NOT IN ('localhost', '127.0.0.1', '::1');"
mysql -e "FLUSH PRIVILEGES;"
mysql -e "DROP DATABASE IF EXISTS test;"
mysql -e "FLUSH PRIVILEGES;"

## cleanup ##
rm -v ~/secure_our_mysql.sh

## uninstall expect ##
apt purge expect

## confirm secured ##
echo "Congratulations, MySQL 8.0 is installed and secured. Onward!"

####################################################################################################
#### SS-Install: Configure MySQL Users + Connections (Supports IPv4 + IPv6) ########################
####################################################################################################

## caching_sha2_password is better but mysql_native_password is still more compatible ##
## 

# SELECT plugin from mysql.user where User='root';
# SELECT User,plugin from mysql.user where User='root';
# SELECT user,authentication_string,plugin,host FROM mysql.user;
# UPDATE mysql.user SET plugin = 'mysql_native_password' WHERE user = 'root' AND plugin = 'auth_socket';

mysql -e "UPDATE mysql.user SET plugin = 'mysql_native_password' WHERE user = 'root';"

## flush MySQL privileges ##
mysql -e "FLUSH PRIVILEGES;"

## create wordpress database as per ss-config ##
mysql -e "CREATE DATABASE ${DB_NAME};"
mysql -e "use ${DB_NAME};"

## create root user (required before granting privileges after MySQL 8.0) ##
mysql -e "CREATE USER 'root'@'localhost' IDENTIFIED BY '${DB_PASSWORD_ROOT}';"
mysql -e "CREATE USER 'root'@'127.0.0.1' IDENTIFIED BY '${DB_PASSWORD_ROOT}';"
mysql -e "CREATE USER 'root'@'::1' IDENTIFIED BY '${DB_PASSWORD_ROOT}';"

## grant root user all privileges on wordpress database (all connections) ##
mysql -e "GRANT ALL ON ${DB_NAME}.* TO 'root'@'localhost';"
mysql -e "GRANT ALL ON ${DB_NAME}.* TO 'root'@'127.0.0.1';"
mysql -e "GRANT ALL ON ${DB_NAME}.* TO 'root'@'::1';"

mysql -e "UPDATE mysql.user SET plugin = 'mysql_native_password' WHERE user = 'root';"

## flush MySQL privileges ##
mysql -e "FLUSH PRIVILEGES;"

## create database user as per ss-config ##
mysql -e "CREATE USER '${DB_USER}'@'localhost' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -e "CREATE USER '${DB_USER}'@'127.0.0.1' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -e "CREATE USER '${DB_USER}'@'::1' IDENTIFIED BY '${DB_PASSWORD}';"

## grant database user all privileges on wordpress database only (all connections) ##
mysql -e "GRANT ALL ON ${DB_NAME}.* TO '${DB_USER}'@'localhost';"
mysql -e "GRANT ALL ON ${DB_NAME}.* TO '${DB_USER}'@'127.0.0.1';"
mysql -e "GRANT ALL ON ${DB_NAME}.* TO '${DB_USER}'@'::1';"

## flush MySQL privileges ##
mysql -e "FLUSH PRIVILEGES;"

####################################################################################################
#### SS-Install: Optimize MySQL Settings ###########################################################
####################################################################################################

## cleanup leftover files ##
rm /tmp/my.cnf

## install custom my.cnf config file ##
wget -O /tmp/my.cnf http://mirrors.slickstack.io/mysql/my-cnf.txt



#### MySQL Settings ####

## SQL mode ##
if [[ -z "$SQL_MODE" ]]; then 
    sed -i "s/@SQL_MODE/STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION/g" /tmp/my.cnf
else 
    sed -i "s/@SQL_MODE/${SQL_MODE}/g" /tmp/my.cnf
fi

## max allowed packet ##
if [[ -z "$SQL_MAX_ALLOWED_PACKET" ]]; then 
    sed -i "s/@SQL_MAX_ALLOWED_PACKET/256M/g" /tmp/my.cnf
else 
    sed -i "s/@SQL_MAX_ALLOWED_PACKET/${SQL_MAX_ALLOWED_PACKET}/g" /tmp/my.cnf
fi

## connect timeout ##
if [[ -z "$SQL_CONNECT_TIMEOUT" ]]; then 
    sed -i "s/@SQL_CONNECT_TIMEOUT/30/g" /tmp/my.cnf
else 
    sed -i "s/@SQL_CONNECT_TIMEOUT/${SQL_CONNECT_TIMEOUT}/g" /tmp/my.cnf
fi

## wait timeout ##
if [[ -z "$SQL_WAIT_TIMEOUT" ]]; then 
    sed -i "s/@SQL_WAIT_TIMEOUT/3600/g" /tmp/my.cnf
else 
    sed -i "s/@SQL_WAIT_TIMEOUT/${SQL_WAIT_TIMEOUT}/g" /tmp/my.cnf
fi

## interactive timeout ##
if [[ -z "$SQL_INTERACTIVE_TIMEOUT" ]]; then 
    sed -i "s/@SQL_INTERACTIVE_TIMEOUT/43200/g" /tmp/my.cnf
else 
    sed -i "s/@SQL_INTERACTIVE_TIMEOUT/${SQL_INTERACTIVE_TIMEOUT}/g" /tmp/my.cnf
fi

## net read timeout ##
if [[ -z "$SQL_NET_READ_TIMEOUT" ]]; then 
    sed -i "s/@SQL_NET_READ_TIMEOUT/30/g" /tmp/my.cnf
else 
    sed -i "s/@SQL_NET_READ_TIMEOUT/${SQL_NET_READ_TIMEOUT}/g" /tmp/my.cnf
fi

## net write timeout ##
if [[ -z "$SQL_NET_WRITE_TIMEOUT" ]]; then 
    sed -i "s/@SQL_NET_WRITE_TIMEOUT/60/g" /tmp/my.cnf
else 
    sed -i "s/@SQL_NET_WRITE_TIMEOUT/${SQL_NET_WRITE_TIMEOUT}/g" /tmp/my.cnf
fi


## set InnoDB buffer pool size (supports "auto" or manual via ss-config) ##
PERCENT_RAM_MB=$(free -m | awk 'NR==2{printf "%d", $2*0.50 }')

if [[ "$INNODB_BUFFER_POOL_SIZE" == "auto" ]]; then 
    sed -i "s/@INNODB_BUFFER_POOL_SIZE/${PERCENT_RAM_MB}M/g" /tmp/my.cnf
else 
    sed -i "s/@INNODB_BUFFER_POOL_SIZE/${INNODB_BUFFER_POOL_SIZE}/g" /tmp/my.cnf
fi

## set InnoDB flush method ##
if [[ -z "$INNODB_FLUSH_METHOD" ]]; then 
    sed -i "s/@INNODB_FLUSH_METHOD/O_DIRECT/g" /tmp/my.cnf
else 
    sed -i "s/@INNODB_FLUSH_METHOD/${INNODB_FLUSH_METHOD}/g" /tmp/my.cnf
fi

## set InnoDB log file size ##
if [[ -z "$INNODB_LOG_FILE_SIZE" ]]; then 
    sed -i "s/@INNODB_LOG_FILE_SIZE/256M/g" /tmp/my.cnf
else 
    sed -i "s/@INNODB_LOG_FILE_SIZE/${INNODB_LOG_FILE_SIZE}/g" /tmp/my.cnf
fi

## set InnoDB log files in group ##
if [[ -z "$INNODB_LOG_FILES_IN_GROUP" ]]; then 
    sed -i "s/@INNODB_LOG_FILES_IN_GROUP/1/g" /tmp/my.cnf
else 
    sed -i "s/@INNODB_LOG_FILES_IN_GROUP/${INNODB_LOG_FILES_IN_GROUP}/g" /tmp/my.cnf
fi

## set InnoDB flush_log_at_trx_commit ##
if [[ "$INNODB_FLUSH_LOG_AT_TRX_COMMIT" == "false" ]]; then
    sed -i "s/@INNODB_FLUSH_LOG_AT_TRX_COMMIT/0/g" /tmp/my.cnf
else 
    sed -i "s/@INNODB_FLUSH_LOG_AT_TRX_COMMIT/1/g" /tmp/my.cnf
fi

## safe/clean/slow shutdown MySQL before update config ##
/etc/init.d/mysql stop

## copy files to their destinations ##
cp /tmp/my.cnf /etc/mysql/my.cnf

## reset permissions ##
chown root:root /etc/mysql/my.cnf
chmod 0775 /etc/mysql/my.cnf

## start the MySQL service again ##
/etc/init.d/mysql start

## Ref: https://github.com/littlebizzy/slickstack/issues/23
## Ref: https://stackoverflow.com/questions/36301100/how-do-i-turn-off-the-mysql-password-validation
## Ref: https://dba.stackexchange.com/questions/4614/cannot-drop-anonymous-user-from-mysql-user
## Ref: https://www.networkinghowtos.com/howto/disable-remote-root-logins-into-mysql/
## Ref: https://www.oreilly.com/library/view/mysql-in-a/9780596514334/re39.html
## Ref: https://stackoverflow.com/questions/36463966/when-is-flush-privileges-in-mysql-really-needed
## Ref: https://askubuntu.com/questions/210976/apt-get-remove-with-wildcard-removed-way-more-than-expected-why
## Ref: https://dev.mysql.com/doc/refman/8.0/en/grant.html
## Ref: https://geert.vanderkelen.org/2018/mysql8-unattended-dpkg/
## Ref: https://stackoverflow.com/questions/50177216/how-to-grant-all-privileges-to-root-user-in-mysql-8-0
## Ref: https://www.techiediaries.com/ubuntu/install-mysql-8-ubuntu-20-04/
## Ref: https://kifarunix.com/install-mysql-8-on-ubuntu-20-04/
## Ref: https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-20-04

## SS_EOF
