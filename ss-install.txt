#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: http://mirrors.slickstack.io/ss-install.txt ###########################################
#### path: /var/www/ss-install #####################################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: reinstalls the SlickStack server and all LEMP modules, etc (idempotent) ##############
#### module version: Ubuntu 18.04 ##################################################################
####################################################################################################

## SS-CONFIG MUST BE PROPERLY CONFIGURED (AND CURRENT) BEFORE RUNNING SS-INSTALL ##

## include SlickStack configuration ##
source /var/www/ss-config

## critical functions (aliases) ##
# rm () { rm -R -f; }
# wget () { wget --no-cache --no-cookies --tries=3 --timeout=15; }
# cp () { cp -R -f -d --no-preserve=mode,ownership; }
# mkdir () { mkdir -p; }

####################################################################################################
#### SlickStack: Compatibility Checks + Backup Live Database #######################################
####################################################################################################

## ensure correct Ubuntu version is installed ##
UBUNTU_VERSION=`lsb_release -rs`
if [[ "${UBUNTU_VERSION}" != "18.04" ]]; then
    echo -e "\e[93mSlickStack is designed for Ubuntu 18.04, but this server is running Ubuntu ${UBUNTU_VERSION}.\e[0m" >&2
    exit 1
fi

## ensure ss-config build version matches ss-install build version ##
if [[ "$SS_BUILD" != "OCT2019G" ]]; then 
    echo -e "\e[93mYour ss-config file is outdated. Please rebuild it and run ss-install again.\e[0m" >&2
    exit 1
fi

## backup database before proceeding ##
source /var/www/ss-dump

####################################################################################################
#### Configure Ubuntu: Create SlickStack Users + Set Various System Defaults #######################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mConfiguring users, permissions and Ubuntu defaults...\e[0m"

## set root password ##
echo root:$ROOT_PASSWORD | /usr/sbin/chpasswd

## ensure root password never expires ##
chage -E -1 -m 0 -M -1 -I -1 -W 99999 root

## create sudo user ##
adduser --disabled-password --gecos "" $SUDO_USER
echo $SUDO_USER:$SUDO_PASSWORD | /usr/sbin/chpasswd

## create sftp user ##
adduser --disabled-password --gecos "" $SFTP_USER
echo $SFTP_USER:$SFTP_PASSWORD | /usr/sbin/chpasswd

## set default editor to nano ##
update-alternatives --set editor /bin/nano

## set timezone ##
if [[ -z "$SS_TIMEZONE" ]]; then 
    timedatectl set-timezone UTC
else 
    timedatectl set-timezone @SS_TIMEZONE
fi

####################################################################################################
#### SlickStack: Download Latest Core Scripts + Cron Jobs (SS-Check) ###############################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mRetrieving latest SlickStack files and copying them to local server...\e[0m"

## download latest versions ##
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/ss-check http://mirrors.slickstack.io/ss-check.txt

## copy files to their destinations ##
cp -R -f -d --no-preserve=mode,ownership /tmp/ss-check /var/www/ss-check

## reset permissions ##
chown root:root /var/www/ss-check
chmod 6770 /var/www/ss-check

## run scripts ##
source /var/www/ss-check

####################################################################################################
#### Configure Ubuntu: Root + Sudo User Permissions (a.k.a. Sudoers Configuration) #################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mConfiguring the Sudoers file (root and sudo users)...\e[0m"

## download latest versions ##
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/sudoers http://mirrors.slickstack.io/ubuntu/sudoers.txt

## replace variables ##
sed -i "s/@SUDO_USER/${SUDO_USER}/g" /tmp/sudoers

## copy files to their destinations ##
cp -R -f -d --no-preserve=mode,ownership /tmp/sudoers /etc/sudoers

## reset permissions ##
chown root:root /etc/sudoers
chmod 0440 /etc/sudoers

####################################################################################################
#### Configure Ubuntu: SSH + SFTP Settings (a.k.a. SSHD Configuration) #############################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mConfiguring SSH (SFTP) settings, user permissions, and port number...\e[0m"

## download latest versions ##
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/sshd_config http://mirrors.slickstack.io/ubuntu/sshd-config.txt

## replace variables ##
sed -i "s/@SUDO_USER/${SUDO_USER}/g" /tmp/sshd_config
sed -i "s/@SFTP_USER/${SFTP_USER}/g" /tmp/sshd_config

## set SSH port number (optional) ##
if [[ -z "$SSH_PORT" ]]; then 
    sed -i "s/@SSH_PORT/6969/g" /tmp/sshd_config
else 
    sed -i "s/@SSH_PORT/${SSH_PORT}/g" /tmp/sshd_config
fi

## copy files to their destinations ##
cp -R -f --no-preserve=mode,ownership /tmp/sshd_config /etc/ssh/sshd_config

## reset permissions ##
chown root:root /etc/ssh/sshd_config
chmod 0440 /etc/ssh/sshd_config

## restart services ##
/etc/init.d/ssh restart

####################################################################################################
#### Configure Ubuntu: Install SlickStack (Root) Crontab File ######################################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mInstalling the SlickStack crontab file to Ubuntu root user crontab...\e[0m"

## install crontab ##
crontab /var/www/0-crontab

## reset permissions ##
chown root:root /var/spool/cron/crontabs/root
chmod 0600 /var/spool/cron/crontabs/root

## reload crontab ##
/etc/init.d/cron reload

####################################################################################################
#### SlickStack: Install Various Modules Via Default Ubuntu Packages ###############################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mInstalling various SlickStack modules from most recent Ubuntu repos...\e[0m"

## fix dpkg ##
DEBIAN_FRONTEND=noninteractive dpkg --configure -a --force-confold

## update repo cache ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update

## upgrade existing repos ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade

## install update-manager-core ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install update-manager-core

## install Linux utilities (Zip, Unzip, DOS2Unix) ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install zip unzip dos2unix

## install Git ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install git

## install ClamAV ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install clamav

####################################################################################################
#### Install Cerbot (Let's Encrypt) Packages Via PPA Repos #########################################
####################################################################################################

## install software-properties-common (for Certbot) ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install software-properties-common

## add custom PPAs (for Certbot) ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" add-apt-repository universe
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" add-apt-repository ppa:certbot/certbot

## update again after adding custom ppas ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update

## install Certbot ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install certbot python-certbot-nginx

####################################################################################################
#### Install PHP-FPM 7.2 + Required Extensions #####################################################
####################################################################################################

## purge PHP 7.0 + PHP 7.1 ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" purge php7.0
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" purge php7.1

## delete PHP 7.0 + PHP 7.1 files ##
rm -R -f /etc/php/7.0*
rm -R -f /etc/php/7.1*

## purge PHP 7.2 (so we can install again fresh) ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" purge php7.2

## install PHP 7.2 and extensions (php7.2 not needed when php7.2-fpm is used) ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install php7.2-bcmath php7.2-curl php7.2-fpm php7.2-gd php7.2-imagick php7.2-json php7.2-mbstring php7.2-mysql php7.2-soap php7.2-xml php7.2-zip

## download latest versions ##
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/php-fpm-conf.txt http://mirrors.slickstack.io/php-fpm/php-fpm-conf.txt
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/php-ini.txt http://mirrors.slickstack.io/php-fpm/php-ini.txt
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/www-conf.txt http://mirrors.slickstack.io/php-fpm/www-conf.txt

## rename files ##
mv /tmp/php-fpm-conf.txt /tmp/php-fpm.conf
mv /tmp/php-ini.txt /tmp/php.ini
mv /tmp/www-conf.txt /tmp/www.conf

## copy files to their destinations ##
cp -R -f --no-preserve=mode,ownership /tmp/php-fpm.conf /etc/php/7.2/fpm/php-fpm.conf
cp -R -f --no-preserve=mode,ownership /tmp/php.ini /etc/php/7.2/fpm/php.ini
cp -R -f --no-preserve=mode,ownership /tmp/php.ini /etc/php/7.2/cli/php.ini
cp -R -f --no-preserve=mode,ownership /tmp/www.conf /etc/php/7.2/fpm/pool.d/www.conf

## customize PHP settings ##
# sed -i '/error_log/c\error_log = /var/www/logs/error.log' /etc/php/7.2/fpm/php-fpm.conf

## set Ubuntu default PHP version ##
update-alternatives --set php /usr/bin/php7.2

## reset permissions ##
chown root:root /etc/php/7.2/fpm/php-fpm.conf
chown root:root /etc/php/7.2/fpm/php.ini
chown root:root /etc/php/7.2/cli/php.ini
chown root:root /etc/php/7.2/fpm/pool.d/www.conf

## restart services ##
/etc/init.d/php7.2-fpm restart

####################################################################################################
### Prepare WP-CLI Configuration (Installation Completed Via Bash Aliases) #########################
####################################################################################################

## MESSAGE: explain repos ##
echo -e "\e[36mInstalling the WP-CLI module directly from SlickStack mirrors...\e[0m"

## uninstall current wp-cli versions ##
rm -R -f /usr/local/bin/wp
rm -R -f /home/wp-completion.bash
rm -R -f /home/${SUDO_USER}/wp-cli.yml
rm -R -f /var/www/meta/.wp-completion*
rm -R -f /var/www/meta/wp-cli.yml
rm -R -f /var/www/html/.wp-cli
rm -R -f /var/www/html/wp-cli
sed -i '/WP-CLI/d' /home/${SUDO_USER}/.bashrc
sed -i '/wp-completion/d' /home/${SUDO_USER}/.bashrc

## symlinks for wp-cli.yml ##
ln -s /home/${SUDO_USER}/.wp-cli/config.yml /var/www/meta/wp-cli.yml &> /dev/null
ln -s /root/.wp-cli/config.yml /var/www/meta/wp-cli.yml &> /dev/null

## download latest versions ##
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/wp-cli.phar http://mirrors.slickstack.io/wp-cli/wp-cli.phar
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/wp-cli.yml http://mirrors.slickstack.io/wp-cli/wp-cli-yml.txt
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/wp-completion.txt http://mirrors.slickstack.io/wp-cli/wp-completion.txt

## make files executable ##
chmod +x /tmp/wp-cli.phar

## copy files to destinations ##
cp -R -f -d --no-preserve=mode,ownership /tmp/wp-cli.phar /usr/local/bin/wp
cp -R -f -d --no-preserve=mode,ownership /tmp/wp-cli.yml /var/www/meta/wp-cli.yml
cp -R -f -d --no-preserve=mode,ownership /tmp/wp-completion.txt /var/www/meta/.wp-completion

## reset permissions ##
## Ref: https://www.alexgeorgiou.gr/wp-cli-www-data-user-permissions-linux/
chown root:root /usr/local/bin/
chown www-data:www-data /usr/local/bin/wp
chown www-data:www-data /var/www/meta/wp-cli.yml
chown www-data:www-data /var/www/meta/.wp-completion
chown root:root /home/${SUDO_USER}/.wp-cli/config.yml
chown root:root /root/.wp-cli/config.yml
chmod 6775 /usr/local/bin/wp
chmod 6775 /var/www/meta/wp-cli.yml
chmod 6775 /var/www/meta/.wp-completion

####################################################################################################
### Install Bash Aliases (Supports Basic SlickStack Commands) + Finalize WP-CLI ####################
####################################################################################################

## MESSAGE: explain repos ##
echo -e "\e[36mInstalling Bash aliases for basic SlickStack commands...\e[0m"

## uninstall old ##
rm -R -f /home/${SUDO_USER}/.bash-aliases
rm -R -f /var/www/meta/.bash-aliases
sed -i '/include Bash aliases/d' /home/${SUDO_USER}/.bashrc
sed -i '\:var/www/meta:d' /home/${SUDO_USER}/.bashrc

## download ##
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/bash-aliases.txt http://mirrors.slickstack.io/ubuntu/bash-aliases.txt

## copy files ##
cp -R -f -d --no-preserve=mode,ownership /tmp/bash-aliases.txt /var/www/meta/.bash-aliases

## reset permissions ##
chown root:root /var/www/meta/.bash-aliases
chmod 6775 /var/www/meta/.bash-aliases

## modify .bashrc file ##
echo '
## include Bash aliases ##
source /var/www/meta/.bash-aliases' >> /home/${SUDO_USER}/.bashrc

## reload .bashrc ##
source /home/${SUDO_USER}/.bashrc

####################################################################################################
#### SlickStack: Install Nginx Server (Single Server Block) + FastCGI Cache ########################
####################################################################################################

## update Ubuntu package cache ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update

## add Nginx mainline (dev) branch ppa ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/add-apt-repository --yes ppa:nginx/development

## update package cache (again... not needed in Ubuntu 18.04+ but just for fun) ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update

## install Nginx-Extras ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install nginx-extras

## download latest versions ##
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/nginx.conf http://mirrors.slickstack.io/nginx/nginx-conf.txt

## replace variables ##
sed -i "s/@FCGI_CACHE_MEMORY/${FCGI_CACHE_MEMORY}/g" /tmp/nginx.conf
sed -i "s/@FCGI_CACHE_INACTIVE/${FCGI_CACHE_INACTIVE}/g" /tmp/nginx.conf
sed -i "s/@FCGI_CACHE_MAX_SIZE/${FCGI_CACHE_MAX_SIZE}/g" /tmp/nginx.conf

## copy files to their destinations ##
cp -R -f --no-preserve=mode,ownership /tmp/nginx.conf /etc/nginx/nginx.conf

## ensure cache directory exists (will not overwrite) ##
mkdir -p /var/www/cache

## reset permissions ##
chown www-data:www-data /var/www/cache
chown root:root /etc/nginx/nginx.conf

## set TMPFS cache storage if enabled ##
if [[ "$FCGI_CACHE_TMPFS" == "true" ]]; then
    mount -t tmpfs -o size=${FCGI_CACHE_MEMORY} tmpfs /var/www/cache
    sed -i '/tmpfs/d' /etc/fstab
    echo "tmpfs /var/www/cache tmpfs defaults,size=${FCGI_CACHE_MEMORY} 0 0" >> /etc/fstab
else
    sed -i '/tmpfs/d' /etc/fstab
fi

## download latest versions ##
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/default http://mirrors.slickstack.io/nginx/server-block-single-site.txt

## replace variables ##
sed -i "s/@DOMAIN/${SITE_DOMAIN}/g" /tmp/default
sed -i "s/@CACHEVALID/${FCGI_CACHE_VALID}/g" /tmp/default

## set FastCGI Cache if enabled ##
if [[ "$FCGI_CACHE" == "false" ]]; then 
    sed -i "s/@FCGI_CACHE/1/g" /tmp/default
else 
    sed -i "s/@FCGI_CACHE/0/g" /tmp/default
fi

## copy files to destinations ##
cp -R -f --no-preserve=mode,ownership /tmp/default /etc/nginx/sites-available/default

## reset permissions ##
chown root:root /etc/nginx/sites-available/default

## restart services ##
/etc/init.d/nginx restart

####################################################################################################
#### SlickStack: Install OpenSSL + Certbot (Let's Encrypt) Free SSL Certificates ###################
####################################################################################################

## run scripts ##
source /var/www/ss-encrypt

####################################################################################################
#### SlickStack: Install MySQL 5.7 (Single Database) + Configure Users #############################
####################################################################################################

## set noninteractive ##
export DEBIAN_FRONTEND=noninteractive;

if [[ -z "$DB_PASSWORD_ROOT" ]]; then 
    echo debconf mysql-server/root_password password ${dbrootpass} | debconf-set-selections
else 
    echo debconf mysql-server/root_password password ${DB_PASSWORD_ROOT} | debconf-set-selections
fi

if [[ -z "$DB_PASSWORD_ROOT" ]]; then 
    echo debconf mysql-server/root_password_again password ${dbrootpass} | debconf-set-selections
else 
    echo debconf mysql-server/root_password_again password ${DB_PASSWORD_ROOT} | debconf-set-selections
fi

# echo "mysql-server-5.7 mysql-server/root_password password ${dbrootpass}" | debconf-set-selections
# echo "mysql-server-5.7 mysql-server/root_password_again password ${dbrootpass}" | debconf-set-selections
# debconf-set-selections <<< "mysql-server-5.7 mysql-server/root_password password ${dbrootpass}"
# debconf-set-selections <<< "mysql-server-5.7 mysql-server/root_password_again password ${dbrootpass}"

## install mysql 5.7 ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install mysql-server-5.7 

## MESSAGE ##
echo -e "\e[36mMySQL 5.7 is installed, now we will secure it...\e[0m"

## install expect ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install expect

## build expect script ##
tee ~/secure_our_mysql.sh > /dev/null << EOF
spawn $(which mysql_secure_installation)

## re-enter root password ##
expect "Enter password for user root:"
if [[ -z "$DB_PASSWORD_ROOT" ]]; then 
    send "${dbrootpass}\r"
else 
    send "${DB_PASSWORD_ROOT}\r"
fi

## skip the validate password plugin ##
expect "Press y|Y for Yes, any other key for No:"
send "n\r"

## skip change root password ##
expect "Change the password for root ? ((Press y|Y for Yes, any other key for No) :"
send "n\r"

## remove anonymous users ##
expect "Remove anonymous users? (Press y|Y for Yes, any other key for No) :"
send "y\r"

## disable remote connections ##
expect "Disallow root login remotely? (Press y|Y for Yes, any other key for No) :"
send "y\r"

## remote test database ##
expect "Remove test database and access to it? (Press y|Y for Yes, any other key for No) :"
send "y\r"

## reload privileges ##
expect "Reload privilege tables now? (Press y|Y for Yes, any other key for No) :"
send "y\r"

## end of script ##
EOF

## run expect script ##
expect ~/secure_our_mysql.sh

## cleanup ##
rm -v ~/secure_our_mysql.sh

## uninstall expect ##
# apt -qq purge expect > /dev/null # Uninstall Expect, commented out in case you need Expect

## confirm secured ##
echo "Congratulations, MySQL 5.7 is installed and secured. Onward!"

## setup MySQL users (via ss-config) ##
if [[ -z "$DB_PASSWORD_ROOT" ]]; then 
    mysql -uroot -p${dbrootpass} -e "CREATE DATABASE ${dbname};"
else 
    mysql -uroot -p${DB_PASSWORD_ROOT} -e "CREATE DATABASE ${DB_NAME};"
fi

if [[ -z "$DB_PASSWORD_ROOT" ]]; then 
    mysql -uroot -p${dbrootpass} -e "CREATE USER '${dbuser}'@'localhost' IDENTIFIED BY '${dbuserpass}';"
else 
    mysql -uroot -p${DB_PASSWORD_ROOT} -e "CREATE USER '${DB_USER}'@'localhost' IDENTIFIED BY '${DB_PASSWORD}';"
fi

if [[ -z "$DB_PASSWORD_ROOT" ]]; then 
    mysql -uroot -p${dbrootpass} -e "CREATE USER '${dbuser}'@'127.0.0.1' IDENTIFIED BY '${dbuserpass}';"
else 
    mysql -uroot -p${DB_PASSWORD_ROOT} -e "CREATE USER '${DB_USER}'@'127.0.0.1' IDENTIFIED BY '${DB_PASSWORD}';"
fi

if [[ -z "$DB_PASSWORD_ROOT" ]]; then 
    mysql -uroot -p${dbrootpass} -e "GRANT ALL PRIVILEGES ON ${dbname}.* TO '${dbuser}'@'localhost';"
else 
    mysql -uroot -p${DB_PASSWORD_ROOT} -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'localhost';"
fi

if [[ -z "$DB_PASSWORD_ROOT" ]]; then 
    mysql -uroot -p${dbrootpass} -e "GRANT ALL PRIVILEGES ON ${dbname}.* TO '${dbuser}'@'127.0.0.1';"
else 
    mysql -uroot -p${DB_PASSWORD_ROOT} -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'127.0.0.1';"
fi

if [[ -z "$DB_PASSWORD_ROOT" ]]; then 
    mysql -uroot -p${dbrootpass} -e "FLUSH PRIVILEGES;"
else 
    mysql -uroot -p${DB_PASSWORD_ROOT} -e "FLUSH PRIVILEGES;"
fi

## cleanup leftover files ##
rm -R -f /tmp/my.cnf

## install custom my.cnf config file ##
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/my.cnf http://mirrors.slickstack.io/mysql/my-cnf.txt

## set MySQL mode ##
if [[ -z "$MYSQL_MODE" ]]; then 
    sed -i "s/@MYSQL_MODE/STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION/g" /tmp/my.cnf
else 
    sed -i "s/@MYSQL_MODE/${MYSQL_MODE}/g" /tmp/my.cnf
fi

## set InnoDB flush method ##
if [[ -z "$INNODB_FLUSH_METHOD" ]]; then 
    sed -i "s/@INNODB_FLUSH_METHOD/O_DIRECT/g" /tmp/my.cnf
else 
    sed -i "s/@INNODB_FLUSH_METHOD/${INNODB_FLUSH_METHOD}/g" /tmp/my.cnf
fi

## set InnoDB flush_log_at_trx_commit ##
if [[ "$INNODB_FLUSH_LOG_AT_TRX_COMMIT" == "false" ]]; then
    sed -i "s/@INNODB_FLUSH_LOG_AT_TRX_COMMIT/0/g" /tmp/my.cnf
else 
    sed -i "s/@INNODB_FLUSH_LOG_AT_TRX_COMMIT/1/g" /tmp/my.cnf
fi

## copy files to their destinations ##
cp -R -f -d --no-preserve=mode,ownership /tmp/my.cnf /etc/mysql/my.cnf

## reset permissions ##
chown root:root /etc/mysql/my.cnf
chmod 0777 /etc/mysql/my.cnf

####################################################################################################
#### SlickStack: Install WordPress CMS (Download + Unzip WordPress Archive) ########################
####################################################################################################

## cleanup files ##
rm -R -f /var/www/html/wordpress*

## change dir (temp fix) ##
cd /var/www/html

## download latest version ##
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /var/www/html/wordpress.zip http://mirrors.slickstack.io/wordpress/wordpress.zip
unzip -o /var/www/html/wordpress.zip
chown -R www-data:wordpress /var/www/html/wordpress
chmod 775 /var/www/html/wordpress
rm -R -f /var/www/html/wp-admin*
rm -R -f /var/www/html/wp-includes*
rm -R -f /var/www/html/wp*.php*
rm -R -f /var/www/html/index*.php*
rm -R -f /var/www/html/composer.json*
rsync -raqI /var/www/html/wordpress/* ./

## cleanup files ##
rm -R -f /var/www/html/wordpress*
rm -R -f /var/www/html/classicpress*

####################################################################################################
#### SlickStack: Install + Configure Throwaway Theme ###############################################
####################################################################################################

## cleanup files ##
rm -R -f /tmp/throwaway*

## retrieve latest throwaway theme ##
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/throwaway.zip http://mirrors.slickstack.io/wordpress/throwaway.zip

## unzip ##
unzip -d /tmp/throwaway/ -o -j /tmp/throwaway.zip

## replace placeholders with ss-config variables ##
sed -i "s/@SITE_EMAIL/${SITE_EMAIL}/g" /tmp/throwaway/functions.php
sed -i "s/@SITE_NAME/${SITE_NAME}/g" /tmp/throwaway/functions.php
sed -i "s/@SITE_DOMAIN/${SITE_DOMAIN}/g" /tmp/throwaway/functions.php
sed -i "s/@WP_LANG/${WP_LANG}/g" /tmp/throwaway/functions.php

## copy files to destinations ##
cp -R -f --no-preserve=mode,ownership /tmp/throwaway /var/www/html/wp-content/themes/

## cleanup files ##
rm -R -f /tmp/throwaway*

####################################################################################################
#### SlickStack: Configure WP-Config File (WordPress Configuration) ################################
####################################################################################################

## retrieve wp-config.php boilerplate ##
# if [[ -z "$WP_CONFIG_BOILERPLATE_SOURCE" ]]; then 
#   wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/wp-config.txt http://mirrors.slickstack.io/wordpress/wp-config.txt
# else 
#     wget --no-check-certificate --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/wp-config.txt "$WP_CONFIG_BOILERPLATE_SOURCE"
# fi

wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/wp-config.txt http://mirrors.slickstack.io/wordpress/wp-config.txt

## replace database placeholders ##
sed -i "s/@DB_NAME/${DB_NAME}/g" /tmp/wp-config.txt
sed -i "s/@DB_USER/${DB_USER}/g" /tmp/wp-config.txt
sed -i "s/@DB_PASSWORD/${DB_PASSWORD}/g" /tmp/wp-config.txt
sed -i "s/@DB_HOST/${DB_HOST}/g" /tmp/wp-config.txt
sed -i "s/@DB_CHARSET/${DB_CHARSET}/g" /tmp/wp-config.txt
sed -i "s/@DB_COLLATE/${DB_COLLATE}/g" /tmp/wp-config.txt
sed -i "s/@DB_PREFIX/${DB_PREFIX}/g" /tmp/wp-config.txt

## set object cache (optional) ##
if [[ -z "$OBJECT_CACHE" ]]; then 
    sed -i "s/@OBJECT_CACHE/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@OBJECT_CACHE/${OBJECT_CACHE}/g" /tmp/wp-config.txt
fi

## set object cache (optional) ##
if [[ -z "$WP_LANG" ]]; then 
    sed -i "s/@WP_LANG/en-US/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_LANG/${WP_LANG}/g" /tmp/wp-config.txt
fi

## replace domain placeholders ##
sed -i "s/@SITE_DOMAIN/${SITE_DOMAIN}/g" /tmp/wp-config.txt
sed -i "s/@SITE_TLD/${SITE_TLD}/g" /tmp/wp-config.txt

## replace SFTP Details placeholders ##
sed -i "s/@SFTP_USER/${SFTP_USER}/g" /tmp/wp-config.txt
sed -i "s/@SFTP_PASSWORD/${SFTP_PASSWORD}/g" /tmp/wp-config.txt

## replace CloudFlare placeholders ##
sed -i "s/@CLOUDFLARE_API_KEY/${CLOUDFLARE_API_KEY}/g" /tmp/wp-config.txt
sed -i "s/@CLOUDFLARE_API_EMAIL/${CLOUDFLARE_API_EMAIL}/g" /tmp/wp-config.txt

## CloudFlare DNS widget ##
if [[ -z "$CLOUDFLARE_WIDGET_DNS" ]]; then 
    sed -i "s/@CLOUDFLARE_WIDGET_DNS/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@CLOUDFLARE_WIDGET_DNS/${CLOUDFLARE_WIDGET_DNS}/g" /tmp/wp-config.txt
fi

## replace salt keys ##
sed -i "s/@AUTHKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@SECUREAUTHKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@LOGGEDINKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@NONCEKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@AUTHSALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@SECUREAUTHSALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@LOGGEDINSALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@NONCESALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt

## Replace Placeholders: Debug ##
if [[ "$SS_TYPE" == "production" ]]; then 
    sed -i "s/@DEBUGON/false/g" /tmp/wp-config.txt
else 
    sed -i "s/@DEBUGON/true/g" /tmp/wp-config.txt
fi

## Replace Placeholders: Debug ##
if [[ "$SS_TYPE" == "production" ]]; then 
    sed -i "s/@DEBUGDISPLAY/false/g" /tmp/wp-config.txt
else 
    sed -i "s/@DEBUGDISPLAY/true/g" /tmp/wp-config.txt
fi

## multisite ##
if [[ "$WP_MULTISITE" == "true" ]]; then 
    sed -i "s/@WP_MULTISITE/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_MULTISITE/false/g" /tmp/wp-config.txt
fi

## core auto updates ##
if [[ -z "$WP_AUTO_UPDATE_CORE" ]]; then 
    sed -i "s/@WP_AUTO_UPDATE_CORE/minor/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_AUTO_UPDATE_CORE/${WP_AUTO_UPDATE_CORE}/g" /tmp/wp-config.txt
fi

## autosave (drafts) ##
if [[ -z "$WP_AUTOSAVE_INTERVAL" ]]; then 
    sed -i "s/@WP_AUTOSAVE_INTERVAL/60/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_AUTOSAVE_INTERVAL/${WP_AUTOSAVE_INTERVAL}/g" /tmp/wp-config.txt
fi

## revisions ##
if [[ -z "$WP_POST_REVISIONS" ]]; then 
    sed -i "s/@WP_POST_REVISIONS/5/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_POST_REVISIONS/${WP_POST_REVISIONS}/g" /tmp/wp-config.txt
fi

## block external requests ##
if [[ -z "$WP_HTTP_BLOCK_EXTERNAL" ]]; then 
    sed -i "s/@WP_HTTP_BLOCK_EXTERNAL/false/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_HTTP_BLOCK_EXTERNAL/${WP_HTTP_BLOCK_EXTERNAL}/g" /tmp/wp-config.txt
fi

## allowed hosts ##
if [[ -z "$WP_ACCESSIBLE_HOSTS" ]]; then 
    sed -i "s/@WP_ACCESSIBLE_HOSTS/api.wordpress.org/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_ACCESSIBLE_HOSTS/${WP_ACCESSIBLE_HOSTS}/g" /tmp/wp-config.txt
fi

## file edits ##
if [[ -z "$WP_DISALLOW_FILE_EDIT" ]]; then 
    sed -i "s/@WP_DISALLOW_FILE_EDIT/false/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_DISALLOW_FILE_EDIT/${WP_DISALLOW_FILE_EDIT}/g" /tmp/wp-config.txt
fi

## file mods ##
if [[ -z "$WP_DISALLOW_FILE_MODS" ]]; then 
    sed -i "s/@WP_DISALLOW_FILE_MODS/false/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_DISALLOW_FILE_MODS/${WP_DISALLOW_FILE_MODS}/g" /tmp/wp-config.txt
fi

## file uploads ##
if [[ -z "$WP_ALLOW_UNFILTERED_UPLOADS" ]]; then 
    sed -i "s/@WP_ALLOW_UNFILTERED_UPLOADS/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_ALLOW_UNFILTERED_UPLOADS/${WP_ALLOW_UNFILTERED_UPLOADS}/g" /tmp/wp-config.txt
fi

## rename files ##
mv /tmp/wp-config.txt /tmp/wp-config.php

## copy files to destinations ##
cp -R -f --no-preserve=mode,ownership /tmp/wp-config.php /var/www/html/wp-config.php

## delete tmp files ##
rm -R -f /tmp/wp-config*

## create directories if doesn't exist (will not overwrite) ##
mkdir -p /var/www/html/wp-content/temp
mkdir -p /var/www/html/wp-content/uploads
mkdir -p /var/www/html/wp-content/upgrade

####################################################################################################
#### SlickStack: Install Redis-Server (Includes Redis-CLI) + PHP-Redis #############################
####################################################################################################

## purge redis-server + php-redis (if installed) ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" purge redis-server
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" purge php-redis

## install redis-server + php-redis ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install redis-server
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install php-redis

## configure redis-server for object caching (only) ##
sed -i '/maxmemory.*bytes.*/c\maxmemory 256mb' /etc/redis/redis.conf
sed -i '/maxmemory-policy noeviction/c\maxmemory-policy allkeys-lru' /etc/redis/redis.conf
sed -i '/always-show-logo yes/c\always-show-logo no' /etc/redis/redis.conf
# sed -i '/logfile/c\logfile /var/www/logs/redis.log' /etc/redis/redis.conf
# sed -i '/dir /c\dir /tmp' /etc/redis/redis.conf

## create log files if do not exist ##
# if [ ! -f "/var/www/logs/redis.log" ]; then touch "/var/www/logs/redis.log"; fi
# mkdir -p /var/run/redis

## reset permissions ##
chown redis:redis /var/www/logs/redis.log
chown redis:redis /etc/redis/redis.conf
chown redis:redis /var/run/redis
chmod 6775 /var/www/logs/redis.log
chmod 775 /etc/redis/redis.conf
chmod 775 /var/run/redis

####################################################################################################
#### SlickStack: Install MU Plugins (WordPress) After PHP-FPM And Redis Installed ##################
####################################################################################################

## run scripts ##
source /var/www/ss-muplugs

####################################################################################################
#### Configure UFW Firewall ########################################################################
####################################################################################################

## delete tmp files ##
rm -R -f /tmp/ufw-conf.txt* /tmp/ufw.conf*
rm -R -f /tmp/user-rules.txt* /tmp/user.rules*

## install ufw ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install ufw

## ufw rules ##
ufw default deny incoming
ufw default allow outgoing
ufw allow @SSH_PORT
ufw allow 6969
ufw allow 80
ufw allow 443
ufw allow 6379
ufw --force disable
ufw --force enable
echo "y" | ufw enable

# retrieve latest versions ##
cd /tmp/
wget --no-cache http://mirrors.slickstack.io/ubuntu/ufw-conf.txt
wget --no-cache http://mirrors.slickstack.io/ubuntu/user-rules.txt
# wget --no-cache http://mirrors.slickstack.io/ubuntu/18.04/ufw/ver/ufw-conf.txt
# wget --no-cache http://mirrors.slickstack.io/ubuntu/18.04/ufw/ver/user-rules.txt

## rename files ##
mv /tmp/ufw-conf.txt /tmp/ufw.conf
mv /tmp/user-rules.txt /tmp/user.rules

## copy files to their destinations ##
cp -R -f -d --no-preserve=mode,ownership /tmp/ufw.conf /etc/ufw/ufw.conf
cp -R -f -d --no-preserve=mode,ownership /tmp/user.rules /etc/ufw/user.rules

## delete tmp files ##
rm -R -f /tmp/ufw-conf.txt* /tmp/ufw.conf*
rm -R -f /tmp/user-rules.txt* /tmp/user.rules*

####################################################################################################
#### Configure ClamAV ##############################################################################
####################################################################################################

## update ClamAV malware cache ##
## NO LONGER NEEDED DURING INITIAL INSTALL (RUNS AUTOMATICALLY) ##
# freshclam

# sed -i '/UpdateLogFile/c\UpdateLogFile /var/www/logs/clamav.log' /etc/clamav/freshclam.conf
sed -i '/LogRotate/c\LogRotate true' /etc/clamav/freshclam.conf
sed -i '/Checks/c\Checks 2' /etc/clamav/freshclam.conf
sed -i '/MaxAttempts/c\MaxAttempts 3' /etc/clamav/freshclam.conf

####################################################################################################
#### Configure Ubuntu: Optimize The System Kernel ##################################################
####################################################################################################

## backup current Ubunt kernel file ##
cp -R -f -d --no-preserve=mode,ownership /etc/sysctl.conf /etc/sysctl.conf.bak

## download latest versions ##
wget --no-cache --no-cookies --tries=3 --timeout=15 -O /tmp/sysctl.conf http://mirrors.slickstack.io/ubuntu/sysctl.txt

## copy files to their destinations ##
cp -R -f -d --no-preserve=mode,ownership /tmp/sysctl.conf /etc/sysctl.conf

## reset permissions ##
chown root:root /etc/sysctl.conf
chmod 0664 /etc/sysctl.conf

####################################################################################################
#### Finish SlickStack Installation ################################################################
####################################################################################################

## not a virgin install anymore ##
mkdir -p /var/www/meta/ && touch /var/www/meta/.cherry

## run scripts ##
source /var/www/ss-clean
source /var/www/ss-perms

## reset error logs ##
cat /dev/null > /var/www/logs/error.log

## flush redis object cache ##
redis-cli flushall

## restart services ##
/etc/init.d/redis-server restart
/etc/init.d/php7.2-fpm restart
/etc/init.d/nginx restart
/etc/init.d/ufw force-reload
/etc/init.d/ufw restart

## confirm installation complete ##
echo -e "\e[36mSlickStack installation complete! Please reboot server and ensure CloudFlare is activated with Full SSL mode.\e[0m"

####################################################################################################
#### External References Used By SlickStack To Improve This Script #################################
####################################################################################################

## Ref: http://wproller.com ##
## Ref: https://github.com/bjornjohansen/deploy-wp-on-vps/blob/master/deploy.sh ##
## Ref: https://github.com/sm0k3net/Useful-Scripts/blob/master/wordpress.sh ##
## Ref: https://github.com/techandme/wordpress-vm ##
## Ref: https://github.com/QROkes/webinoly ##
## Ref: https://github.com/WordOps/WordOps ##
## Ref: https://www.isicca.com/en/lemp-howto-install-nginx-php7-mariadb/ ##
## Ref: https://gist.github.com/FeChagas/54b0cdf354b197dc8e417357d7687e8b ##
## Ref: https://github.com/GeekPress/WP-Quick-Install ##
## Ref: https://github.com/bajpangosh/High-Traffic-wordpress-server-configuration ##
## Ref: https://gist.github.com/nickfox-taterli/2c283d73ba817392fb0f9f15d9cfa514 ##
## Ref: https://gist.github.com/beardedinbinary/79d7ad34f9980f0a4c23 ##
## Ref: https://www.linuxbabe.com/security/letsencrypt-webroot-tls-certificate
## Ref: https://stackoverflow.com/questions/49668542/create-a-script-that-adds-lines-of-code-to-bashrc-then-reloads-the-terminal
## Ref: https://peteris.rocks/blog/unattended-installation-of-wordpress-on-ubuntu-server/
## Ref: https://serverfault.com/questions/783527/non-interactive-silent-install-of-mysql-5-7-on-ubuntu-16-04-lts/830352#830352
## Ref: https://www.percona.com/blog/2016/10/18/upgrading-to-mysql-5-7-beware-of-the-new-strict-mode/
## Ref: https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
